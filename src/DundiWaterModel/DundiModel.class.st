Class {
	#name : #DundiModel,
	#superclass : #CMAbstractModel,
	#instVars : [
		'theGrounds',
		'theKine',
		'theGrasses'
	],
	#category : #DundiWaterModel
}

{ #category : #'as yet unclassified' }
DundiModel class >> initialGrassDensity [

	^ 0.1
]

{ #category : #accessing }
DundiModel class >> maxRainAmount [

	^ 2
]

{ #category : #'as yet unclassified' }
DundiModel class >> numberOfCows [

	^ 30
]

{ #category : #'as yet unclassified' }
DundiModel class >> rainProbability [

	^ 0.05
]

{ #category : #'as yet unclassified' }
DundiModel >> diffuseGrass [

	20 timesRepeat: [
		self askRandom: DundiGround toDo: #diffuse: with: #grassAmount ].

	
]

{ #category : #'as yet unclassified' }
DundiModel >> diffuseWater [

	20 timesRepeat: [
		self askRandom: DundiGround toDo: #diffuse: with: #waterAmount ].

	
]

{ #category : #init }
DundiModel >> homogeneousEnv2 [

	self
		createGridLines: 50
		columns: 50
		neighbourhood: 8
		closed: false.
		
	self theGrounds do: [ :ground |
		ground
			initializeRandomGrass;
			initializeRandomWater ].
		
	self diffuseWater.
	self diffuseGrass.
	
	self initAgents.
		
	self
		displayPov: #povGrass of: DundiGround;
		displayPov: #pov of: DundiCow.
]

{ #category : #'init entities' }
DundiModel >> initAgents [

	self
		createN: self class numberOfCows
		randomlyLocatedAloneEntities: DundiCow.
]

{ #category : #'as yet unclassified' }
DundiModel >> makeItRain [

	| rainAmount |
	rainAmount := Random new nextBetween: 0 and: self class maxRainAmount.

	theGrounds do: [ :ground |
		ground waterAmount: (ground waterAmount + rainAmount) ].
]

{ #category : #control }
DundiModel >> step: arg1 [

	Random new next < self class rainProbability ifTrue: [ 
		self makeItRain ].

	self
		stepEntities: self theGrounds;
		askRandom: DundiCow toDo: #step.
]

{ #category : #accessing }
DundiModel >> theGrasses [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	 ^ theGrasses
		 ifNil: [ theGrasses := OrderedCollection new ]
]

{ #category : #accessing }
DundiModel >> theGrasses: aNewCollection [
	" Set a new collection for theXXXs attribute.
	!! This method was automatically generated by Cormas !!"

	theGrasses := aNewCollection.
]

{ #category : #accessing }
DundiModel >> theGrounds [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	 ^ theGrounds
		 ifNil: [ theGrounds := OrderedCollection new ]
]

{ #category : #accessing }
DundiModel >> theGrounds: aNewCollection [
	" Set a new collection for theXXXs attribute.
	!! This method was automatically generated by Cormas !!"

	theGrounds := aNewCollection.
]

{ #category : #accessing }
DundiModel >> theKine [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	 ^ theKine
		 ifNil: [ theKine := OrderedCollection new ]
]

{ #category : #accessing }
DundiModel >> theKine: aNewCollection [
	" Set a new collection for theXXXs attribute.
	!! This method was automatically generated by Cormas !!"

	theKine := aNewCollection.
]
