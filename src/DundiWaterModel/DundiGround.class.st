Class {
	#name : #DundiGround,
	#superclass : #CMSpatialEntityElement,
	#instVars : [
		'grassAmount',
		'waterAmount',
		'isGrassFresh'
	],
	#category : #DundiWaterModel
}

{ #category : #'as yet unclassified' }
DundiGround class >> diffusionRate [

	^ 0.1
]

{ #category : #accessing }
DundiGround class >> entityName [

	^ 'Ground'
]

{ #category : #'as yet unclassified' }
DundiGround class >> spawnNewGrassProbability [

	^ 0.2
]

{ #category : #'as yet unclassified' }
DundiGround class >> waterConsumptionRate [

	^ Random new next / 10
]

{ #category : #'as yet unclassified' }
DundiGround >> consumeWater [
	"Grass consumes water"
	waterAmount := waterAmount - (grassAmount * self class waterConsumptionRate).
]

{ #category : #'as yet unclassified' }
DundiGround >> diffuse: aSymbol [

	| value neighbourValue setter |
	value := self perform: aSymbol.

	self neighbourhood do: [ :neighbour |
		neighbourValue := neighbour perform: aSymbol.
		neighbourValue := neighbourValue + (value * self class diffusionRate / 8).
		
		setter := aSymbol, ':'.
		
		neighbour
			perform: setter
			with: neighbourValue ].
		
	self perform: setter with: (value * (1 - self class diffusionRate))

]

{ #category : #'as yet unclassified' }
DundiGround >> diffuseFreshGrass [
	
	self hasGrass ifFalse: [ ^ self ].
	self isGrassFresh ifFalse: [ ^ self ].

	self neighbourhood do: [ :neighbour |
		neighbour isGrassFresh ifTrue: [
			neighbour grassAmount:
				(neighbour grassAmount + (self grassAmount * self class diffusionRate / 8)) ] ].
		
	self grassAmount: (self grassAmount * (1 - self class diffusionRate))

]

{ #category : #'as yet unclassified' }
DundiGround >> diffuseWater [

	self diffuse: #waterAmount
]

{ #category : #'as yet unclassified' }
DundiGround >> dryGrass [

	isGrassFresh := false.
]

{ #category : #accessing }
DundiGround >> grassAmount [
	"Getter accessor with default value!! This method was automatically generated by Cormas !!"
	^ grassAmount ifNil: [ grassAmount := self grassAmount_default ]
]

{ #category : #accessing }
DundiGround >> grassAmount: anObject [
	" Set a value for the receiver's grassAmount
	!! This method was automatically generated by Cormas !!"
	 grassAmount := anObject max: 0
]

{ #category : #defaults }
DundiGround >> grassAmount_default [
	" Answer a default value for the grassAmount
	!! This method was automatically generated by Cormas !!"
	^ 0
]

{ #category : #'as yet unclassified' }
DundiGround >> growGrass [

	self grassAmount: (Cormas logisticGrowth: self grassAmount r: 0.02 K: 10).
]

{ #category : #testing }
DundiGround >> hasEnoughWater [

	^ waterAmount >= self class waterConsumptionRate 
]

{ #category : #testing }
DundiGround >> hasGrass [

	^ grassAmount > 0.1
]

{ #category : #initialization }
DundiGround >> initializeRandomGrass [

	self grassAmount: (Random new nextIntegerBetween: 0 and: 3).
	isGrassFresh := true.
]

{ #category : #initialization }
DundiGround >> initializeRandomWater [

	self waterAmount: (Random new nextIntegerBetween: 0 and: 10)
]

{ #category : #testing }
DundiGround >> isAbstract [ 
	^ false
]

{ #category : #accessing }
DundiGround >> isGrassFresh [

	^ isGrassFresh 
]

{ #category : #pov }
DundiGround >> povGrass [

	^ self
		povAttribute: #grassAmount
		min: 0
		max: 10
		color: (isGrassFresh ifTrue: [ Color green ] ifFalse: [ Color yellow ]).
]

{ #category : #pov }
DundiGround >> povWater [

	^ self
		povAttribute: #waterAmount
		min: 0
		max: 10
		color: Color blue
]

{ #category : #'as yet unclassified' }
DundiGround >> spawnNewGrass [

	self initializeRandomGrass
]

{ #category : #stepping }
DundiGround >> step [
	
	self diffuseWater.
	self diffuseFreshGrass.
	
	self hasGrass ifFalse: [ 
		self hasEnoughWater ifTrue: [ 
			Random new next < self class spawnNewGrassProbability ifTrue: [ self spawnNewGrass ] ].
		^ self ].
	
	isGrassFresh ifFalse: [ ^ self ].
	
	self hasEnoughWater ifFalse: [ self dryGrass ].
	self consumeWater.
	self growGrass.
]

{ #category : #accessing }
DundiGround >> waterAmount [
	"Getter accessor with default value!! This method was automatically generated by Cormas !!"
	^ waterAmount ifNil: [ waterAmount := self waterAmount_default ]
]

{ #category : #accessing }
DundiGround >> waterAmount: anObject [
	" Set a value for the receiver's waterAmount
	!! This method was automatically generated by Cormas !!"
	 waterAmount := anObject max: 0
]

{ #category : #defaults }
DundiGround >> waterAmount_default [
	" Answer a default value for the waterAmount
	!! This method was automatically generated by Cormas !!"
	^ 0
]
